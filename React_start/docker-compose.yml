# docker compose down ; docker image prune -f ; docker compose up --build

version: '3.8'

services:

  mysql-kc:
    container_name: mysql-kc
    image: mysql:8.0
    ports:
      - 3306:3306
    restart: unless-stopped
    environment:
      # The user, password and database that Keycloak
      # is going to create and use
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: keycloak
      MYSQL_DATABASE: keycloak
      # Self-Explanatory
      MYSQL_ROOT_PASSWORD: admin
    volumes:
      - ./data2/mysql-keycloak:/var/lib/mysql
      - ./keycloak.sql:/docker-entrypoint-initdb.d/init.sql # Mount the SQL file
    networks:
      - keycloak-and-mysql-network
  keycloak-w:
    image: quay.io/keycloak/keycloak:26.0.5
    ports:
      - 8182:8182
    restart: unless-stopped
    command: start-dev --http-port=8182
    environment:
      # User and password for the Administration Console
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      # KC_PROXY: edge
      KC_DB: mysql
      KC_DB_URL_HOST: mysql-kc
      KC_DB_URL_PORT: 3306
      # Same values as the mysql-kc service
      KC_DB_SCHEMA: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_DB_URL_DATABASE: keycloak
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/localhost/8180 && echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && cat <&3 | grep -q '200 OK'",
        ]
      interval: 30s
      timeout: 5s
      retries: 20

    depends_on:
      - mysql-kc
    volumes:
      - keycloak-realm-data:/opt/jboss/keycloak/standalone/data
    networks:
      - keycloak-and-mysql-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    ports:
      - "8082:80"
    environment:
      PMA_HOST: mysql-kc
      MYSQL_ROOT_PASSWORD: admin
    depends_on:
      - mysql-kc
    networks:
      - keycloak-and-mysql-network  
  
  mongodb:
    image: mongodb/mongodb-community-server:latest
    container_name: mongodb
    networks:
      - pro_backend_network
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  ordersdb:
    image: mongodb/mongodb-community-server:latest
    container_name: ordersdb
    networks:
      - pro_backend_network
    restart: always
    ports:
      - "27018:27017"  # This binds ordersdb’s internal port 27017 to host’s port 27018
    volumes:
      - ordersdb_data:/data/db

  flask-api:
    build:
      context: ./flask-api
    container_name: flask-api
    environment:
      FLASK_ENV: development
      MONGO_URI_MAIN: "mongodb://mongodb:27017/your_main_db"
      # MONGO_URI_ORDERS: "mongodb://ordersdb:27017/your_orders_db"
    depends_on:
      - mongodb
      - ordersdb
    networks:
      - pro_backend_network
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - ./uploads:/static/uploads  # Mount uploads folder to store images

  order-service:
    build:
      context: ./OrderService
    container_name: order-service_c
    environment:
      FLASK_ENV: development
      MONGO_URI_ORDERS: "mongodb://ordersdb:27017/your_orders_db"
    depends_on:
      - ordersdb
    networks:
      - pro_backend_network
    restart: always
    ports:
      - "8081:8081"

  frontend:
    build:
      context: ./my-react-app
    container_name: frontend_c
    environment:
      REACT_APP_API_URL_MAIN: http://localhost:8080
      REACT_APP_API_URL_ORDER: http://localhost:8081
    ports:
      - "5173:5173"
    networks:
      - pro_backend_network
    restart: always

networks:
  pro_backend_network:
    driver: bridge
  keycloak-and-mysql-network:  

volumes:
  mongodb_data:
  ordersdb_data:
  mysql-keycloak:
  keycloak-realm-data:
